{
  "_from": "officegen",
  "_id": "officegen@0.4.7",
  "_inBundle": false,
  "_integrity": "sha512-utPZLP7LqT+vmyhP/L2S61eW6tGTggcjDtyZBqCuau3UumBCPTh3TtdsHJc4TOWNVwDSdt98fFfAzD16zqErdA==",
  "_location": "/officegen",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "escapedName": "officegen",
    "fetchSpec": "latest",
    "name": "officegen",
    "raw": "officegen",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/officegen/-/officegen-0.4.7.tgz",
  "_shasum": "00be7877b0a7112dfb2126d40152061d288b1d12",
  "_shrinkwrap": null,
  "_spec": "officegen",
  "_where": "E:\\4GI\\Programmation web\\programmation_web\\projet\\servicewebdraw",
  "author": {
    "name": "Ziv Barber",
    "url": "https://github.com/Ziv-Barber"
  },
  "bugs": {
    "url": "https://github.com/Ziv-Barber/officegen/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "archiver": "~1.3.0",
    "async": "^2.0.1",
    "fast-image-size": "^0.1.3",
    "jszip": "^2.5.0",
    "lodash": "^4.16.2",
    "readable-stream": "~2.2.2",
    "setimmediate": ">= 1.0.1",
    "xmlbuilder": "^3.0.0"
  },
  "deprecated": false,
  "description": "Office Open XML Generator using Node.js streams. Supporting Microsoft Office 2007 and later Word (docx), PowerPoint (pptx,ppsx) and Excel (xlsx). This module is for all frameworks and environments. No need for any commandline tool - this module is doing everything inside it.",
  "devDependencies": {
    "adm-zip": "^0.4.7",
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-jsdoc": "^2.1.0",
    "jaguarjs-jsdoc": "^1.0.1",
    "mocha": "^3.0.2",
    "sinon": "^1.17.5",
    "time-grunt": "^1.4.0"
  },
  "directories": {
    "examples": "examples",
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/Ziv-Barber/officegen#readme",
  "keywords": [
    "2007",
    "Office Open XML",
    "charts",
    "create",
    "creator",
    "docx",
    "excel",
    "generate",
    "generator",
    "maker",
    "microsoft",
    "office",
    "officegen",
    "powerpoint",
    "ppsx",
    "pptx",
    "stream",
    "word",
    "xlsx"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "officegen",
  "optionalDependencies": {},
  "readme": "# officegen [![npm version](https://badge.fury.io/js/officegen.svg)](https://badge.fury.io/js/officegen) [![Build Status](https://travis-ci.org/Ziv-Barber/officegen.png?branch=master)](https://travis-ci.org/Ziv-Barber/officegen) [![Join the chat at https://gitter.im/officegen/Lobby](https://badges.gitter.im/officegen/Lobby.svg)](https://gitter.im/officegen/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) \n\nThis module can generate Office Open XML files for Microsoft Office 2007 and later.\nThis module is not depend on any framework and you don't need to install Microsoft Office, so you can use it for any kind of javascript application. Also the output is a stream and not a file, not dependent on any output tool.\nThis module should work on any environment that supports Node.js 0.10 or later including Linux, OSX and Windows.\n\n[Trello](<https://trello.com/b/dkaiSGir/officegen-make-office-documents-in-javascript>)\n\nThis module generates Excel (.xlsx), PowerPoint (.pptx) and Word (.docx) documents.\nOfficegen also supporting PowerPoint native charts objects with embedded data.\n\n## Contents: ##\n\n- [Features](#a1)\n- [Installation](#a2)\n- [Public API](#a3)\n- [Examples](#a4)\n- [The source](#a5)\n- [FAQ](#a6)\n- [Support](#a7)\n- [Changelog](#a8)\n- [License](#a10)\n- [Credit](#a11)\n\n<a name=\"a1\"></a>\n## Features: ##\n\n- Generating Microsoft PowerPoint document (.pptx file):\n  - Create PowerPoint document with one or more slides.\n  - Support both PPT and PPS.\n  - Can create native charts.\n  - Add text blocks.\n  - Add images.\n  - Can declare fonts, alignment, colors and background.\n  - You can rotate objects.\n  - Support shapes: Ellipse, Rectangle, Line, Arrows, etc.\n  - Support hidden slides.\n  - Support automatic fields like date, time and current slide number.\n  - Support speaker notes.\n  - Support slide layouts.\n- Generating Microsoft Word document (.docx file):\n  - Create Word document.\n  - You can add one or more paragraphs to the document and you can set the fonts, colors, alignment, etc.\n  - You can add images.\n  - Support header and footer.\n  - Support bookmarks and hyperlinks.\n- Generating Microsoft Excel document (.xlsx file):\n  - Create Excel document with one or more sheets. Supporting cells with either numbers or strings.\n\n<a name=\"a2\"></a>\n\n## Installation: ##\n\nvia Git:\n\n```bash\n$ git clone git://github.com/Ziv-Barber/officegen.git\n```\n\nvia npm:\n\n```bash\n$ npm install officegen\n```\n\nIf you are enthusiastic about using the latest that officegen has to offer (beware - may be unstable), you can install directly from the officegen repository using:\n\n```bash\n$ npm install Ziv-Barber/officegen#master\n```\n\nThis module is depending on:\n\n- archiver\n- setimmediate\n- fast-image-size\n- xmlbuilder\n- lodash\n\n<a name=\"a3\"></a>\n\n## Public API: ##\n\n### Creating the document object: ###\n\n```js\nvar officegen = require('officegen');\n```\n\nThere are two ways to use the officegen returned function to create the document object:\n\n```js\nvar myDoc = officegen ( '<type of document to create>' );\n\nvar myDoc = officegen ({\n  'type': '<type of document to create>'\n  // More options here (if needed)\n});\n```\n\nGenerating PowerPoint 2007 object:\n\n```js\nvar pptx = officegen ( 'pptx' );\n```\n\nGenerating Word 2007 object:\n\n```js\nvar docx = officegen ( 'docx' );\n```\n\nGenerating Excel 2007 object:\n\n```js\nvar xlsx = officegen ( 'xlsx' );\n```\n\nGeneral events of officegen:\n\n- 'finalize' - been called after finishing to create the document.\n- 'error' - been called on error.\n\nEvent examples:\n\n```js\npptx.on ( 'finalize', function ( written ) {\n      console.log ( 'Finish to create a PowerPoint file.\\nTotal bytes created: ' + written + '\\n' );\n    });\n\npptx.on ( 'error', function ( err ) {\n      console.log ( err );\n    });\n```\n\nAnother way to register either 'finalize' or 'error' events:\n\n```js\nvar pptx = officegen ({\n    'type': 'pptx', // or 'xlsx', etc\n    'onend': function ( written ) {\n        console.log ( 'Finish to create a PowerPoint file.\\nTotal bytes created: ' + written + '\\n' );\n    },\n    'onerr': function ( err ) {\n        console.log ( err );\n    }\n});\n```\n\nIf you are preferring to use callbacks instead of events you can pass your callbacks to the generate method\n(see below).\n\nNow you should fill the object with data (we'll see below) and then you should call generate with\nan output stream to create the output Office document.\n\nExample with pptx:\n\n```js\nvar out = fs.createWriteStream ( 'out.pptx' );\n\npptx.generate ( out );\nout.on ( 'close', function () {\n  console.log ( 'Finished to create the PPTX file!' );\n});\n```\n\nPassing callbacks to generate:\n\n```js\nvar out = fs.createWriteStream ( 'out.pptx' );\n\npptx.generate ( out, {\n  'finalize': function ( written ) {\n    console.log ( 'Finish to create a PowerPoint file.\\nTotal bytes created: ' + written + '\\n' );\n  },\n  'error': function ( err ) {\n    console.log ( err );\n  }\n});\n```\n\nGenerating HTTP stream (no file been created):\n\n```js\nvar http = require(\"http\");\nvar officegen = require('officegen');\n\nhttp.createServer ( function ( request, response ) {\n  response.writeHead ( 200, {\n    \"Content-Type\": \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    'Content-disposition': 'attachment; filename=surprise.pptx'\n    });\n\n  var pptx = officegen ( 'pptx' );\n\n  pptx.on ( 'finalize', function ( written ) {\n      // ...\n      });\n\n  pptx.on ( 'error', function ( err ) {\n      // ...\n      });\n\n  // ... (fill pptx with data)\n\n  pptx.generate ( response );\n}).listen ( 3000 );\n```\n\n### Put data inside the document object: ###\n\n#### MS-Office document properties (for all document types): ###\n\nThe default Author of all the documents been created by officegen is 'officegen'. If you want to put anything else please\nuse the 'creator' option when calling the officegen function:\n\n```js\nvar pptx = officegen ({\n    'type': 'pptx', // or 'xlsx', etc\n\t'creator': '<your project name here>'\n});\n```\n\nChange the document title (pptx,ppsx,docx):\n\n```js\nvar pptx = officegen ({\n    'type': 'pptx',\n\t'title': '<title>'\n});\n\n// or\n\npptx.setDocTitle ( '<title>' );\n```\n\nFor Word only:\n\n```js\nvar docx = officegen ({\n    'type': 'docx',\n\t'subject': '...',\n\t'keywords': '...',\n\t'description': '...'\n});\n\n// or\n\ndocx.setDocSubject ( '...' );\ndocx.setDocKeywords ( '...' );\ndocx.setDescription ( '...' );\n```\n\n#### PowerPoint: ####\n\nSetting slide size:\n```\npptx.setSlideSize ( cx, cy, type )\n```\n\nArguments:\n- cx - width of the slide (in pixels)\n- cy - height of the slide (in pixels)\n- Supported types:\n\t- '35mm'\n\t- 'A3'\n\t- 'A4'\n\t- 'B4ISO'\n\t- 'B4JIS'\n\t- 'B5ISO'\n\t- 'B5JIS'\n\t- 'banner'\n\t- 'custom'\n\t- 'hagakiCard'\n\t- 'ledger'\n\t- 'letter'\n\t- 'overhead'\n\t- 'screen16x10'\n\t- 'screen16x9'\n\t- 'screen4x3'\n\nCreating a new slide:\n\n```js\nslide = pptx.makeNewSlide ();\n```\n\nFor creating a new slide using a layout:\n\n```js\nslide = pptx.makeNewSlide ({\n\tuserLayout: 'title'\n});\nslide.setTitle ( 'The title' );\nslide.setSubTitle ( 'Another text' ); // For either 'title' and 'secHead' only.\n// for 'obj' layout use slide.setObjData ( ... ) to change the object element inside the slide.\n```\n\nuserLayout can be:\n\n- 'title': the first layout of Office (title).\n- 'obj': the 2nd layout of Office (with one title and one object).\n- 'secHead': the 3rd layout of Office.\n\nOr more advance example:\n\n```js\nslide = pptx.makeNewSlide ({\n\tuserLayout: 'title'\n});\n// Both setTitle and setSubTitle excepting all the parameters that you can pass to slide.addText - see below:\nslide.setTitle ([\n\t// This array is like a paragraph and you can use any settings that you pass for creating a paragraph,\n\t// Each object here is like a call to addText:\n\t{ text: 'Hello ', options: { font_size: 56 } },\n\t{ text: 'World!', options: { font_size: 56, font_face: 'Arial', color: 'ffff00' } }\n]);\n```\n\nThe returned object from makeNewSlide representing a single slide. Use it to add objects into this slide.\nYou must create at last one slide on your pptx/ppsx document.\n\nInside each slide you can place objects, for example: text box, shapes, images, etc.\n\nProperties of the slide object itself:\n\n- \"name\" - name for this slide.\n- \"back\" - the background color.\n- \"color\" - the default font color to use.\n- \"show\" - change this property to false if you want to disable this slide.\n\nThe slide object supporting the following methods:\n\n- addText ( text, options )\n- addShape ( shape, options )\n- addImage ( image, options )\n- addChart ( chartInfo )\n- addTable ( rowsSpec, options )\n\nRead only methods:\n\n- getPageNumber - return the ID of this slide.\n\nCommon properties that can be added to the options object for all the add based methods:\n\n- x - start horizontal position. Can be either number, percentage or 'c' to center this object (horizontal).\n- y - start vertical position. Can be either number, percentage or 'c' to center this object (vertical).\n- cx - the horizontal size of this object. Can be either number or percentage of the total horizontal size.\n- cy - the vertical size of this object. Can be either number or percentage of the total vertical size.\n- color - the font color for text.\n- fill - the background color.\n- line - border color / line color.\n- flip_vertical: true - flip the object vertical.\n- flip_horizontal: true - flip the object horizontal\n- shape - see below.\n\nFont properties:\n\n- font_face\n- font_size (in points)\n- bold: true\n- underline: true\n- char_spacing: floating point number (kerning)\n- baseline: percent (of font size). Used for superscript and subscript.\n\nText alignment properties:\n\n- align - can be either 'left' (default), 'right', 'center' or 'justify'.\n- indentLevel - indent level (number: 0+, default = 0).\n\nLine/border extra properties (only effecting if the 'line' property exist):\n\n- 'line_size' - line width in pixels.\n- 'line_head' - the shape name of the line's head side (either: 'triangle', 'stealth', etc).\n- 'line_tail' - the shape name of the line's tail side (either: 'triangle', 'stealth', etc).\n\nThe 'shape' property:\n\nNormally every object is a rectangle but you can change that for every object using the shape property, or in case that\nyou don't need to write any text inside that object, you can use the addShape method instead of addText. Use the shape\nproperty only if you want to use a shape other then the default and you also want to add text inside it.\n\nShapes list:\n\n- 'rect' (default) - rectangle.\n- 'ellipse'\n- 'roundRect' - round rectangle.\n- 'triangle'\n- 'line' - draw line.\n- 'cloud'\n- 'hexagon'\n- 'flowChartInputOutput'\n- 'wedgeEllipseCallout'\n- (much more shapes already supported - I'll update this list later)\n\nPlease note that every color property can be either:\n\n- String of the color code. For example: 'ffffff', '000000', '888800', etc.\n- Color object:\n  - 'type' - The type of the color fill to use. Right now only 'solid' and 'gradient' supported.\n  - 'color' - String with the color code to use.\n  - 'alpha' - transparent level (0-100).\n- For 'gradient' fill:\n  - 'color' - Array of strings with the color code to use OR array of object, each object include \"color\" and \"position\" parameters. i.e. `[{\"position\": 0, \"color\": '000000'}, {}, ...]`\n  - 'alpha' - transparent level (0-100).\n  - 'angle' - (optional) the angle of gradient rotation\n\nAdding images:\n\nJust pass the image file name as the first parameter to addImage and the 2nd parameter, which is optional, is normal options objects\nand you can use all the common properties ('cx', 'cy', 'y', 'x', etc).\n\nExamples:\n\nChanging the background color of a slide:\n\n```js\nslide.back = '000088';\n```\n\nor:\n\n```js\nslide.back = { type: 'solid', color: '008800' };\n```\n\nExamples how to put text inside the new slide:\n\n```js\n// Change the background color:\nslide.back = '000000';\n\n// Declare the default color to use on this slide (default is black):\nslide.color = 'ffffff';\n\n// Basic way to add text string:\nslide.addText ( 'This is a test' );\nslide.addText ( 'Fast position', 0, 20 );\nslide.addText ( 'Full line', 0, 40, '100%', 20 );\n\n// Add text box with multi colors and fonts:\nslide.addText ( [\n  { text: 'Hello ', options: { font_size: 56 } },\n  { text: 'World!', options: { font_size: 56, font_face: 'Arial', color: 'ffff00' } }\n  ], { cx: '75%', cy: 66, y: 150 } );\n// Please note that you can pass object as the text parameter to addText.\n\nslide.addText ( 'Office generator', {\n  y: 66, x: 'c', cx: '50%', cy: 60, font_size: 48,\n  color: '0000ff' } );\n\nslide.addText ( 'Big Red', {\n  y: 250, x: 10, cx: '70%',\n  font_face: 'Wide Latin', font_size: 54,\n  color: 'cc0000', bold: true, underline: true } );\n```\n\n#### Speaker notes: #####\n\nPowerPoint slides can contain speaker notes, to do that use the setSpeakerNote method:\n\n```js\nslide.setSpeakerNote ( 'This is a speaker note!' );\n```\n\n#### Charts: ####\n\nPowerPoint slides can contain charts with embedded data.  To create a chart:\n\n   `slide.addChart( chartInfo) `\n\nWhere `chartInfo` object is an object that takes the following attributes:\n\n - `data` -  an array of data, see examples below\n - `renderType` -  specifies base chart type, may be one of `\"bar\", \"pie\", \"group-bar\", \"column\", \"stacked-column\", \"line\"`\n - `title` -  chart title (default: none)\n - `valAxisTitle` -  value axis title (default: none)\n - `catAxisTitle` - category axis title (default: none)\n - `valAxisMinValue` - value axis min  (default: none)\n - `valAxisMaxValue` - vlaue axis max value (default: none)\n - `valAxisNumFmt` - value axis format, e.g `\"$0\"` or `\"0%\"` (default: none)\n - `valAxisMajorGridlines` - true|false (false)\n - `valAxisMinorGridlines` - true|false (false)\n - `valAxisCrossAtMaxCategory` - true|false (false)\n - `catAxisReverseOrder` - true|false (false)\n - `fontSize` - text size for chart, e.g. \"1200\" for 12pt type\n - `xml` - optional XML overrides to `<c:chart>` as a Javascript object that is mixed in\n\nAlso, the overall chart and  each data series take an an optional `xml` attribute, which specifies XML overrides to the `<c:series>` attribute.\n* The `xml` argument for the `chartInfo` is mixed in to the `c:chartSpace` attribute.\n* The `xml` argument for the `data` series is mixed into the `c:ser` attribute.\n\nFor instance, to specify the overall text size, you can specify the following on the `chartInfo` object.\nThe snippet below is what happens under the scenes when you specify `fontSize: 1200`\n\n```javascript\nchartInfo = {\n // ....\n \"xml\": {\n      \"c:txPr\": {\n        \"a:bodyPr\": {},\n        \"a:listStyle\": {},\n        \"a:p\": {\n          \"a:pPr\": {\n            \"a:defRPr\": {\n              \"@sz\": \"1200\"\n            }\n          },\n          \"a:endParaRPr\": {\n            \"@lang\": \"en-US\"\n          }\n        }\n      }\n    }\n```\n\nExamples how to add chart into the slide:\n\n```js\n// Column chart\nslide = pptx.makeNewSlide();\nslide.name = 'Chart slide';\nslide.back = 'ffffff';\nslide.addChart(\n  {   title: 'Column chart',\n          renderType: 'column',\n          valAxisTitle: 'Costs/Revenues ($)',\n          catAxisTitle: 'Category',\n          valAxisNumFmt: '$0',\n                valAxisMaxValue: 24,\n    data:  [ // each item is one serie\n    {\n      name: 'Income',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [23.5, 26.2, 30.1, 29.5, 24.6],\n      color: 'ff0000' // optional\n    },\n    {\n      name: 'Expense',\n      labels: ['2005', '2006', '2007', '2008', '2009'],\n      values: [18.1, 22.8, 23.9, 25.1, 25],\n      color: '00ff00' // optional\n    }]\n  }\n)\n\n// Pie chart\nslide = pptx.makeNewSlide();\nslide.name = 'Pie Chart slide';\nslide.back = 'ffff00';\nslide.addChart(\n  {   title: 'My production',\n      renderType: 'pie',\n    data:  [ // each item is one serie\n    {\n      name: 'Oil',\n      labels: ['Czech Republic', 'Ireland', 'Germany', 'Australia', 'Austria', 'UK', 'Belgium'],\n      values: [301, 201, 165, 139, 128,  99, 60],\n      colors: ['ff0000', '00ff00', '0000ff', 'ffff00', 'ff00ff', '00ffff', '000000'] // optional\n    }]\n  }\n)\n\n// Bar Chart\nslide = pptx.makeNewSlide();\nslide.name = 'Bar Chart slide';\nslide.back = 'ff00ff';\nslide.addChart(\n  { title: 'Sample bar chart',\n    renderType: 'bar',\n      data:  [ // each item is one serie\n      {\n        name: 'europe',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [2.5, 2.6, 2.8],\n        color: 'ff0000' // optional\n      },\n      {\n        name: 'namerica',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [2.5, 2.7, 2.9],\n        color: '00ff00' // optional\n      },\n      {\n        name: 'asia',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [2.1, 2.2, 2.4],\n        color: '0000ff' // optional\n      },\n      {\n        name: 'lamerica',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [0.3, 0.3, 0.3],\n        color: 'ffff00' // optional\n      },\n      {\n        name: 'meast',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [0.2, 0.3, 0.3],\n        color: 'ff00ff' // optional\n      },\n      {\n        name: 'africa',\n        labels: ['Y2003', 'Y2004', 'Y2005'],\n        values: [0.1, 0.1, 0.1],\n        color: '00ffff' // optional\n      }\n\n    ]\n  }\n)\n\n// Line Chart\nslide = pptx.makeNewSlide();\nslide.name = 'Line Chart slide';\nslide.back = 'ff00ff';\nslide.addChart(\n  { title: 'Sample line chart',\n    renderType: 'line',\n      data:  [ // each item is one serie\n      {\n        name: 'europe',\n        labels: ['Y2003', 'Y2004', 'Y2005', 'Y2006'],\n        values: [2.5, 2.6, 2.8, 2.4],\n        color: 'ff0000' // optional\n      },\n      {\n        name: 'namerica',\n        labels: ['Y2003', 'Y2004', 'Y2005', 'Y2006'],\n        values: [2.5, 2.7, 2.9, 3.2],\n        color: '00ff00' // optional\n      },\n      {\n        name: 'asia',\n        labels: ['Y2003', 'Y2004', 'Y2005', 'Y2006'],\n        values: [2.1, 2.2, 2.4, 2.2],\n        color: '0000ff' // optional\n      }\n    ]\n  }\n)\n```\n\n#### Tables:\n\nAdd a table to a PowerPoint slide:\n\n```javascript\n var rows = [];\n  for (var i = 0; i < 12; i++) {\n    var row = [];\n    for (var j = 0; j < 5; j++) {\n      row.push(\"[\" + i + \",\" + j + \"]\");\n    }\n    rows.push(row);\n  }\n  slide.addTable(rows, {});\n```\n\nSpecific options for tables (in addition to standard : x, y, cx, cy, etc.) :\n- columnWidth : width of all columns (same size for all columns). Must be a number (~1 000 000)\n- columnWidths : list of width for each columns (custom size per column). Must be array of number. This param will overwrite columnWidth if both are given\n\nFormatting can also be applied directly to a cell:\n\n```javascript\nvar rows = [];\nrows.push([\n\t{\n\t\tval: \"Category\",\n        \topts: {\n          \t\tfont_face   : \"Arial\",\n          \t\talign       : \"l\",\n          \t\tbold        : 0\n        \t}\n      },\n      {\n        \tval  :\"Average Score\",\n        \topts: {\n          \t\tfont_face   : \"Arial\",\n          \t\talign       : \"r\",\n          \t\tbold        : 1,\n          \t\tfont_color  : \"000000\",\n          \t\tfill_color  : \"f5f5f5\"\n        \t}\n      }\n]);\nslide.addTable(rows, {});\n```\n\n## Word: ##\n\nAll the text data in Word is saved in paragraphs. To add a new paragraph:\n\n```js\nvar pObj = docx.createP ();\n```\n\nParagraph options:\n\n```js\npObj.options.align = 'center'; // Also 'right' or 'justify'.\npObj.options.indentLeft = 1440; // Indent left 1 inch\n```\n\nEvery list item is also a paragraph so:\n\n```js\nvar pObj = docx.createListOfDots ();\n\nvar pObj = docx.createListOfNumbers ();\n```\n\nNow you can fill the paragraph object with one or more text strings using the addText method:\n\n```js\npObj.addText ( 'Simple' );\n\npObj.addText ( ' with color', { color: '000088' } );\n\npObj.addText ( ' and back color.', { color: '00ffff', back: '000088' } );\n\npObj.addText ( 'Bold + underline', { bold: true, underline: true } );\n\npObj.addText ( 'Fonts face only.', { font_face: 'Arial' } );\n\npObj.addText ( ' Fonts face and size. ', { font_face: 'Arial', font_size: 40 } );\n\npObj.addText ( 'External link', { link: 'https://github.com' } );\n\n// Hyperlinks to bookmarks also supported:\npObj.addText ( 'Internal link', { hyperlink: 'myBookmark' } );\n// ...\n// Start somewhere a bookmark:\npObj.startBookmark ( 'myBookmark' );\n// ...\n// You MUST close your bookmark:\npObj.endBookmark ();\n```\n\nAdd an image to a paragraph:\n\n```\nvar path = require('path');\n\npObj.addImage ( path.resolve(__dirname, 'myFile.png' ) );\npObj.addImage ( path.resolve(__dirname, 'myFile.png', { cx: 300, cy: 200 } ) );\n```\n\nTo add a line break;\n\n```js\nvar pObj = docx.createP ();\npObj.addLineBreak ();\n```\n\nTo add a page break:\n\n```js\ndocx.putPageBreak ();\n```\n\nTo add a horizontal line:\n\n```js\nvar pObj = docx.createP ();\npObj.addHorizontalLine ();\n```\n\nTo add a back line:\n\n```js\nvar pObj = docx.createP ({ backline: 'E0E0E0' });\npObj.addText ( 'Backline text1' );\npObj.addText ( ' text2' );\n```\n\nTo add a table:\n\n```js\nvar table = [\n  [{\n    val: \"No.\",\n    opts: {\n      cellColWidth: 4261,\n      b:true,\n      sz: '48',\n      shd: {\n        fill: \"7F7F7F\",\n        themeFill: \"text1\",\n        \"themeFillTint\": \"80\"\n      },\n      fontFamily: \"Avenir Book\"\n    }\n  },{\n    val: \"Title1\",\n    opts: {\n      b:true,\n      color: \"A00000\",\n      align: \"right\",\n      shd: {\n        fill: \"92CDDC\",\n        themeFill: \"text1\",\n        \"themeFillTint\": \"80\"\n      }\n    }\n  },{\n    val: \"Title2\",\n    opts: {\n      align: \"center\",\n      vAlign: \"center\",\n      cellColWidth: 42,\n      b:true,\n      sz: '48',\n      shd: {\n        fill: \"92CDDC\",\n        themeFill: \"text1\",\n        \"themeFillTint\": \"80\"\n      }\n    }\n  }],\n  [1,'All grown-ups were once children',''],\n  [2,'there is no harm in putting off a piece of work until another day.',''],\n  [3,'But when it is a matter of baobabs, that always means a catastrophe.',''],\n  [4,'watch out for the baobabs!','END'],\n]\n\nvar tableStyle = {\n  tableColWidth: 4261,\n  tableSize: 24,\n  tableColor: \"ada\",\n  tableAlign: \"left\",\n  tableFontFamily: \"Comic Sans MS\",\n  borders: true\n}\n\ndocx.createTable (table, tableStyle);\n```\n\nHeader and footer:\n\n```js\n// Add a header:\nvar header = docx.getHeader ().createP ();\nheader.addText ( 'This is the header' );\n// Please note that the object header here is a paragraph object so you can use ANY of the paragraph API methods also for header and footer.\n// The getHeader () method excepting a string parameter:\n// getHeader ( 'even' ) - change the header for even pages.\n// getHeader ( 'first' ) - change the header for the first page only.\n// to do all of that for the footer, use the getFooter instead of getHeader.\n// and sorry, right now only createP is supported (so only creating a paragraph) so no tables, etc.\n```\n\nTo Create Word Document by json:\n\n```js\nvar table = [\n    [{\n        val: \"No.\",\n        opts: {\n            cellColWidth: 4261,\n            b:true,\n            sz: '48',\n            shd: {\n                fill: \"7F7F7F\",\n                themeFill: \"text1\",\n                \"themeFillTint\": \"80\"\n            },\n            fontFamily: \"Avenir Book\"\n        }\n    },{\n        val: \"Title1\",\n        opts: {\n            b:true,\n            color: \"A00000\",\n            align: \"right\",\n            shd: {\n                fill: \"92CDDC\",\n                themeFill: \"text1\",\n                \"themeFillTint\": \"80\"\n            }\n        }\n    },{\n        val: \"Title2\",\n        opts: {\n            align: \"center\",\n            cellColWidth: 42,\n            b:true,\n            sz: '48',\n            shd: {\n                fill: \"92CDDC\",\n                themeFill: \"text1\",\n                \"themeFillTint\": \"80\"\n            }\n        }\n    }],\n    [1,'All grown-ups were once children',''],\n    [2,'there is no harm in putting off a piece of work until another day.',''],\n    [3,'But when it is a matter of baobabs, that always means a catastrophe.',''],\n    [4,'watch out for the baobabs!','END'],\n]\n\nvar tableStyle = {\n    tableColWidth: 4261,\n    tableSize: 24,\n    tableColor: \"ada\",\n    tableAlign: \"left\",\n    tableFontFamily: \"Comic Sans MS\"\n}\n\nvar data = [[{\n        type: \"text\",\n        val: \"Simple\"\n    }, {\n        type: \"text\",\n        val: \" with color\",\n        opt: { color: '000088' }\n    }, {\n        type: \"text\",\n        val: \"  and back color.\",\n        opt: { color: '00ffff', back: '000088' }\n    }, {\n        type: \"linebreak\"\n    }, {\n        type: \"text\",\n        val: \"Bold + underline\",\n        opt: { bold: true, underline: true }\n    }], {\n        type: \"horizontalline\"\n    }, [{ backline: 'EDEDED' }, {\n        type: \"text\",\n        val: \"  backline text1.\",\n        opt: { bold: true }\n    }, {\n        type: \"text\",\n        val: \"  backline text2.\",\n        opt: { color: '000088' }\n    }], {\n        type: \"text\",\n        val: \"Left this text.\",\n        lopt: { align: 'left' }\n    }, {\n        type: \"text\",\n        val: \"Center this text.\",\n        lopt: { align: 'center' }\n    }, {\n        type: \"text\",\n        val: \"Right this text.\",\n        lopt: { align: 'right' }\n    }, {\n        type: \"text\",\n        val: \"Fonts face only.\",\n        opt: { font_face: 'Arial' }\n    }, {\n        type: \"text\",\n        val: \"Fonts face and size.\",\n        opt: { font_face: 'Arial', font_size: 40 }\n    }, {\n        type: \"table\",\n        val: table,\n        opt: tableStyle\n    }, [{ // arr[0] is common option.\n        align: 'right'\n    }, {\n        type: \"image\",\n        path: path.resolve(__dirname, 'images_for_examples/sword_001.png')\n    },{\n        type: \"image\",\n        path: path.resolve(__dirname, 'images_for_examples/sword_002.png')\n    }], {\n        type: \"pagebreak\"\n    }\n]\n\ndocx.createByJson(data);\n```\n\n#### Excel: ####\n\n```js\nsheet = xlsx.makeNewSheet ();\nsheet.name = 'My Excel Data';\n```\n\nFill cells:\n\n```js\n// Using setCell:\nsheet.setCell ( 'E7', 340 );\nsheet.setCell ( 'G102', 'Hello World!' );\n\n// Direct way:\nsheet.data[0] = [];\nsheet.data[0][0] = 1;\nsheet.data[0][1] = 2;\nsheet.data[1] = [];\nsheet.data[1][3] = 'abc';\n```\n\n<a name=\"a4\"></a>\n\n## Examples: ##\n\n- [make_pptx.js](examples/make_pptx.js) - Example how to create PowerPoint 2007 presentation and save it into file.\n- [make_xlsx.js](examples/make_xlsx.js) - Example how to create Excel 2007 sheet and save it into file.\n- [make_docx.js](examples/make_docx.js) - Example how to create Word 2007 document and save it into file.\n- [pptx_server.js](examples/pptx_server.js) - Example HTTP server that generating a PowerPoint file with your name without using files on the server side.\n\n<a name=\"a5\"></a>\n## Hackers Wonderland: ##\n\n#### How to hack into the code ####\n\nYou can check the jsdoc documentation:\n\n```bash\ngrunt jsdoc\n```\n\n#### Testing ####\n\nA basic test suite creates XLSX, PPTX, DOCX files and compares them to reference file located under `test_files`.\nTo run the tests, run the following at the command line within the project root:\n\n```bash\nnpm test\n```\n\n#### Debugging ####\n\nIf needed, you can activate some verbose messages (warning: this does not cover all part of the lib yet) with :\n\n```js\nofficegen.setVerboseMode(true);\n```\n\n\n<a name=\"a6\"></a>\n## FAQ: ##\n\n- Q: Do you support also PPSX files?\n- A: Yes! Just pass the type 'ppsx' to makegen instead of 'pptx'.\n\n<a name=\"a7\"></a>\n## Support: ##\n\nPlease visit the officegen Google Group:\n\n[officegen Google Group](https://groups.google.com/forum/?fromgroups#!forum/node-officegen)\n\nPlans for the next release:\n[Trello](<https://trello.com/b/dkaiSGir/officegen-make-office-documents-in-javascript>)\n\nThe Slack team:\n[Slack](https://zivbarber.slack.com/messages/officegen/)\n\n<a name=\"a8\"></a>\n## History: ##\n\n[Changelog](https://github.com/Ziv-Barber/officegen/blob/master/CHANGELOG)\n\n<a name=\"a9\"></a>\n\n<a name=\"a10\"></a>\n## License: ##\n\n(The MIT License)\n\nCopyright (c) 2013-2017 Ziv Barber;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n<a name=\"a11\"></a>\n\n## Credit: ##\n\n- For creating zip streams i'm using 'archiver' by cmilhench, dbrockman, paulj originally inspired by Antoine van Wel's zipstream.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Ziv-Barber/officegen.git"
  },
  "scripts": {
    "test": "mocha test/test-docx.js test/test-xlsx.js test/test-pptx-nocharts.js test/test-pptx-charts.js"
  },
  "url": "https://github.com/Ziv-Barber/officegen",
  "version": "0.4.7"
}
